"""
Proje yÃ¶netim veritabanÄ± kurulum betiÄŸi.
Bu betik, Benzer Desen projesi iÃ§in SQLite tabanlÄ± proje yÃ¶netim veritabanÄ± oluÅŸturur.
"""
import sqlite3
import os
import json
from datetime import datetime

def create_db():
    """Proje yÃ¶netim veritabanÄ±nÄ± oluÅŸtur"""
    # VeritabanÄ± dosya yolu
    db_path = "project_management.db"
    
    # VeritabanÄ± mevcut mu kontrol et
    db_exists = os.path.exists(db_path)
    
    # VeritabanÄ± baÄŸlantÄ±sÄ± oluÅŸtur
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # TablolarÄ± oluÅŸtur
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tasks (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        description TEXT,
        category TEXT NOT NULL,
        priority TEXT NOT NULL,
        status TEXT NOT NULL,
        estimated_hours FLOAT,
        actual_hours FLOAT,
        start_date TEXT,
        completion_date TEXT,
        dependencies TEXT,
        notes TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # Proje durumu tablosu
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS project_status (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        total_progress INTEGER NOT NULL,
        current_focus TEXT,
        next_milestones TEXT,
        blockers TEXT,
        last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # Oturumlar tablosu
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS sessions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        session_number INTEGER NOT NULL,
        session_date TEXT NOT NULL,
        completed_tasks TEXT,
        progress_notes TEXT,
        next_steps TEXT
    )
    ''')
    
    # Proje durumu tablosunda veri var mÄ± kontrol et
    cursor.execute("SELECT COUNT(*) FROM project_status")
    status_count = cursor.fetchone()[0]
    
    # EÄŸer proje durumu yoksa ekle
    if status_count == 0:
        cursor.execute('''
        INSERT INTO project_status (total_progress, current_focus, next_milestones, blockers)
        VALUES (?, ?, ?, ?)
        ''', (70, 'Proje yÃ¶netimi geÃ§iÅŸi ve SQLite entegrasyonu', 'MVP sÃ¼rÃ¼mÃ¼ (MayÄ±s sonu)', ''))
    
    # DeÄŸiÅŸiklikleri kaydet
    conn.commit()
    
    print(f"VeritabanÄ± {'oluÅŸturuldu' if not db_exists else 'gÃ¼ncellendi'}: {db_path}")
    
    return conn, cursor

def import_tasks(conn, cursor, tasks_file):
    """tasks.md dosyasÄ±ndan gÃ¶revleri iÃ§e aktar"""
    import re
    
    try:
        with open(tasks_file, "r", encoding="utf-8") as f:
            content = f.read()
        
        # GÃ¶rev bloklarÄ± regex ile bul
        task_pattern = r"#### ([A-Z]+-\d+-[\w-]+)\n(.*?)(?=#### |$)"
        task_blocks = re.findall(task_pattern, content, re.DOTALL)
        
        task_count = 0
        
        for task_id, task_content in task_blocks:
            # Durum bilgisini Ã§Ä±kar
            status_match = re.search(r"\*\*Durum\*\*: (.+?)[\n\r]", task_content)
            status = "Not Started"
            if status_match:
                status_text = status_match.group(1)
                if "TamamlandÄ±" in status_text:
                    status = "Completed"
                elif "Devam Ediyor" in status_text:
                    status = "In Progress"
                elif "Beklemede" in status_text:
                    status = "Waiting"
            
            # Kategori ve baÅŸlÄ±ÄŸÄ± ayÄ±r
            category, number, title = task_id.split("-", 2)
            
            # AÃ§Ä±klama Ã§Ä±kar
            description_match = re.search(r"\*\*AÃ§Ä±klama\*\*: (.+?)[\n\r]", task_content)
            description = description_match.group(1) if description_match else ""
            
            # Ã–ncelik Ã§Ä±kar
            priority_match = re.search(r"\*\*Ã–ncelik\*\*: (.+?)[\n\r]", task_content)
            priority = priority_match.group(1) if priority_match else "P2"
            
            # Tahmini sÃ¼re
            estimated_match = re.search(r"\*\*Tahmini\*\*: (\d+)s", task_content)
            estimated_hours = float(estimated_match.group(1)) if estimated_match else None
            
            # GerÃ§ek sÃ¼re
            actual_match = re.search(r"\*\*GerÃ§ek\*\*: (\d+)s", task_content)
            actual_hours = float(actual_match.group(1)) if actual_match else None
            
            # BaÅŸlangÄ±Ã§ tarihi
            start_match = re.search(r"\*\*BaÅŸlangÄ±Ã§\*\*: (.+?)[\n\r]", task_content)
            start_date = start_match.group(1) if start_match else None
            
            # Tamamlanma tarihi
            completion_match = re.search(r"\*\*Tamamlanma\*\*: (.+?)[\n\r]", task_content)
            completion_date = completion_match.group(1) if completion_match else None
            
            # BaÄŸÄ±mlÄ±lÄ±klar
            dependencies_match = re.search(r"\*\*BaÄŸÄ±mlÄ±lÄ±klar\*\*: (.+?)[\n\r]", task_content)
            dependencies = dependencies_match.group(1) if dependencies_match else ""
            
            # Notlar
            notes_match = re.search(r"\*\*Notlar\*\*: (.+?)(?:[\n\r]|$)", task_content)
            notes = notes_match.group(1) if notes_match else ""
            
            # VeritabanÄ±na ekle veya gÃ¼ncelle
            cursor.execute("SELECT COUNT(*) FROM tasks WHERE id = ?", (task_id,))
            task_exists = cursor.fetchone()[0] > 0
            
            if task_exists:
                # GÃ¶revi gÃ¼ncelle
                cursor.execute('''
                UPDATE tasks SET
                    title = ?, description = ?, category = ?, priority = ?,
                    status = ?, estimated_hours = ?, actual_hours = ?,
                    start_date = ?, completion_date = ?, dependencies = ?,
                    notes = ?, updated_at = CURRENT_TIMESTAMP
                WHERE id = ?
                ''', (
                    title, description, category, priority, status,
                    estimated_hours, actual_hours, start_date, completion_date,
                    dependencies, notes, task_id
                ))
            else:
                # Yeni gÃ¶rev ekle
                cursor.execute('''
                INSERT INTO tasks (
                    id, title, description, category, priority, status,
                    estimated_hours, actual_hours, start_date, completion_date,
                    dependencies, notes
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    task_id, title, description, category, priority, status,
                    estimated_hours, actual_hours, start_date, completion_date,
                    dependencies, notes
                ))
            
            task_count += 1
        
        # DeÄŸiÅŸiklikleri kaydet
        conn.commit()
        
        print(f"{task_count} gÃ¶rev iÃ§e aktarÄ±ldÄ±.")
        
    except Exception as e:
        print(f"GÃ¶rev iÃ§e aktarma hatasÄ±: {str(e)}")

def import_project_status(conn, cursor, status_file):
    """PROJECT_STATUS.md dosyasÄ±ndan proje durumunu iÃ§e aktar"""
    try:
        with open(status_file, "r", encoding="utf-8") as f:
            content = f.read()
        
        # Toplam ilerleme yÃ¼zdesini Ã§Ä±kar
        progress_match = re.search(r"\*\*Toplam Ä°lerleme\*\*: (\d+)%", content)
        total_progress = int(progress_match.group(1)) if progress_match else 0
        
        # Mevcut odak
        focus_match = re.search(r"## ðŸ’¡ YapÄ±lacaklar Listesi(.*?)###", content, re.DOTALL)
        current_focus = "Proje yÃ¶netimi ve SQLite entegrasyonu"
        if focus_match:
            focus_text = focus_match.group(1).strip()
            current_focus = focus_text[:200] + "..." if len(focus_text) > 200 else focus_text
        
        # Bir sonraki adÄ±mlar
        next_steps_match = re.search(r"## ðŸ“‹ Bir Sonraki Oturumda YapÄ±lacaklar(.*?)##", content, re.DOTALL)
        next_milestones = ""
        if next_steps_match:
            next_text = next_steps_match.group(1).strip()
            next_milestones = next_text[:200] + "..." if len(next_text) > 200 else next_text
        
        # Proje durumunu gÃ¼ncelle
        cursor.execute('''
        UPDATE project_status SET
            total_progress = ?,
            current_focus = ?,
            next_milestones = ?,
            last_updated = CURRENT_TIMESTAMP
        WHERE id = 1
        ''', (total_progress, current_focus, next_milestones))
        
        # DeÄŸiÅŸiklikleri kaydet
        conn.commit()
        
        print("Proje durumu gÃ¼ncellendi.")
        
    except Exception as e:
        print(f"Proje durumu iÃ§e aktarma hatasÄ±: {str(e)}")

def add_session(conn, cursor, session_number, progress_notes="", completed_tasks="", next_steps=""):
    """Yeni bir oturum ekle"""
    cursor.execute('''
    INSERT INTO sessions (session_number, session_date, completed_tasks, progress_notes, next_steps)
    VALUES (?, ?, ?, ?, ?)
    ''', (
        session_number,
        datetime.now().strftime("%Y-%m-%d"),
        completed_tasks,
        progress_notes,
        next_steps
    ))
    
    # DeÄŸiÅŸiklikleri kaydet
    conn.commit()
    
    print(f"Oturum {session_number} kaydedildi.")

def get_task_summary(cursor):
    """GÃ¶rev Ã¶zetini gÃ¶ster"""
    # Durum daÄŸÄ±lÄ±mÄ±
    cursor.execute('''
    SELECT status, COUNT(*) FROM tasks GROUP BY status
    ''')
    status_counts = cursor.fetchall()
    
    print("\nGÃ¶rev Durumu:")
    for status, count in status_counts:
        print(f"  {status}: {count}")
    
    # Ã–ncelik daÄŸÄ±lÄ±mÄ±
    cursor.execute('''
    SELECT priority, COUNT(*) FROM tasks GROUP BY priority
    ''')
    priority_counts = cursor.fetchall()
    
    print("\nÃ–ncelik DaÄŸÄ±lÄ±mÄ±:")
    for priority, count in priority_counts:
        print(f"  {priority}: {count}")
    
    # Son 5 gÃ¼ncellenen gÃ¶rev
    cursor.execute('''
    SELECT id, title, status, updated_at FROM tasks
    ORDER BY updated_at DESC LIMIT 5
    ''')
    recent_tasks = cursor.fetchall()
    
    print("\nSon GÃ¼ncellenen GÃ¶revler:")
    for task_id, title, status, updated_at in recent_tasks:
        print(f"  {task_id} - {status} - {title} ({updated_at})")

def main():
    """Ana fonksiyon"""
    # VeritabanÄ± oluÅŸtur
    conn, cursor = create_db()
    
    # GÃ¶revleri iÃ§e aktar
    tasks_file = "tasks.md"
    if os.path.exists(tasks_file):
        import_tasks(conn, cursor, tasks_file)
    
    # Proje durumunu iÃ§e aktar
    status_file = "PROJECT_STATUS.md"
    if os.path.exists(status_file):
        import_project_status(conn, cursor, status_file)
    
    # Bu oturumu kaydet
    add_session(
        conn, cursor, 
        session_number=17,
        progress_notes="Proje yÃ¶netim veritabanÄ± oluÅŸturuldu ve veri aktarÄ±mÄ± yapÄ±ldÄ±",
        completed_tasks="Proje yÃ¶netim sistemi iÃ§in SQLite veritabanÄ± kurulumu",
        next_steps="GÃ¶rev yÃ¶netimi ve durum raporlama iÃ§in CLI araÃ§larÄ± geliÅŸtirme"
    )
    
    # GÃ¶rev Ã¶zetini gÃ¶ster
    get_task_summary(cursor)
    
    # BaÄŸlantÄ±yÄ± kapat
    conn.close()
    
    print("\nÄ°ÅŸlem tamamlandÄ±.")

if __name__ == "__main__":
    main()
