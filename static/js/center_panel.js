// center_panel.js
// Olu≈üturulma: 2025-04-19
// Hazƒ±rlayan: Kafkas ‚ù§Ô∏è Luna
// A√ßƒ±klama:
// Orta panelde, se√ßilen g√∂rsele g√∂re benzer desenleri g√∂steren dinamik yapƒ±.
// Sunucudan gelen benzerlik sonu√ßlarƒ±nƒ± g√∂sterir. Hover'da metadata + b√ºy√ºk g√∂rsel i√ßerir.

const centerContainer = document.getElementById("center-panel");

// Bu fonksiyon dƒ±≈üarƒ±dan √ßaƒürƒ±lƒ±r
function loadSimilarImages(selectedFilename, model = "pattern", topN = 10, metric = "cosine") {
  centerContainer.innerHTML = "üîÑ Benzer g√∂rseller y√ºkleniyor...";

  fetch(`/find-similar?filename=${encodeURIComponent(selectedFilename)}&model=${model}&topN=${topN}&metric=${metric}`)
    .then(res => res.json())
    .then(results => {
      centerContainer.innerHTML = "";

      results.forEach(result => {
        const box = document.createElement("div");
        box.className = "image-box";

        const img = document.createElement("img");
        img.src = `thumbnails/${result.filename}`;
        img.loading = "lazy";
        img.alt = result.filename;

        const tooltip = document.createElement("div");
        tooltip.className = "tooltip";

        const blendText = result.features?.length
          ? result.features.map(f => `${f[0]} (${f[1]}%)`).join(", ")
          : "Yok";

        tooltip.innerHTML = `
          <img src='realImages/${result.filename}' />
          <strong>${result.design}</strong><br>
          Season: ${result.season}<br>
          Quality: ${result.quality}<br>
          Blend: ${blendText}<br>
          Cluster: ${result.cluster || 'Yok'}<br>
          Similarity: ${result.similarity?.toFixed(3) || '‚Äî'}
        `;

        box.appendChild(img);
        box.appendChild(tooltip);
        centerContainer.appendChild(box);
      });
    })
    .catch(err => {
      centerContainer.innerText = `‚ùå Benzer g√∂rseller y√ºklenemedi: ${err}`;
    });
}
